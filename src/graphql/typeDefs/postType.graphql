type Post {
  id: ID!
  title: String!
  text: String!
  points: Int!
  owner_id: Int!
  owner: User
  created_at: String!
  updated_at: String!
}

input createPostInput {
  title: String!
  text: String!
}

input updatePostInput {
  id: Int!
  title: String!
  text: String!
}

type PostsResult {
  posts: [Post]!
  hasPrevious: Boolean!
  hasNext: Boolean!
}

# type EntityNotFoundError {
#   message: String!
# }

# union PostResult = Post | EntityNotFoundError

type Query {
  posts(limit: Int = 10, offset: Int = 0): PostsResult!
  post(id: Int!): Post
}

type Mutation {
  createPost(input: createPostInput!): Post
  updatePost(input: updatePostInput!): Boolean!
  deletePost(id: Int!): Boolean!
  vote(postId: Int!, value: Int!): Boolean!
}
